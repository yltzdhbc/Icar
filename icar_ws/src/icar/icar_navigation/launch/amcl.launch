<!-- amcl的英文全称是adaptive Monte Carlo localization，其实就是蒙特卡洛定位方法的一种升级版，
    使用自适应的KLD方法来更新粒子，这里不再多说，而mcl（蒙特卡洛定位）法使用的是粒子滤波的方法来进行定位的。
    而粒子滤波很粗浅的说就是一开始在地图空间很均匀的撒一把粒子，然后通过获取机器人的motion来移动粒子，
    比如机器人向前移动了一米，所有的粒子也就向前移动一米，不管现在这个粒子的位置对不对。
    使用每个粒子所处位置模拟一个传感器信息跟观察到的传感器信息（一般是激光）作对比，从而赋给每个粒子一个概率。
    之后根据生成的概率来重新生成粒子，概率越高的生成的概率越大。这样的迭代之后，所有的粒子会慢慢地收敛到一起，
    机器人的确切位置也就被推算出来了。  -->
<launch>
    <!-- //当设置为true时，AMCL将会订阅map话题，而不是调用服务返回地图。也就是说，当设置为true时，
    有另外一个节点实时的发布map话题，也就是机器人在实时的进行地图构建，并供给amcl话题使用；
    当设置为false时，通过map server，也就是调用已经构建完成的地图。在navigation 1.4.2中新加入的参数。 -->
    <arg name="use_map_topic" default="false"/>
    <arg name="scan_topic" default="scan"/>
    <!-- <arg name="initial_pose_x" default="-2.0"/>
    <arg name="initial_pose_y" default="-0.5"/>
    <arg name="initial_pose_a" default="0.0"/> -->
    <arg name="initial_pose_x" default="0.0"/>
    <arg name="initial_pose_y" default="0.0"/>
    <arg name="initial_pose_a" default="0.0"/>


    <node pkg="amcl" type="amcl" name="amcl" clear_params="true">

        <!-- ********************里程计模型参数******************** -->
        <!-- 模型使用，可以是"diff", "omni", "diff-corrected", "omni-corrected",
             后面两个是对老版本里程计模型的矫正，相应的里程计参数需要做一定的减小 -->
        <param name="odom_model_type" value="diff-corrected"/>
        <!-- 指定由机器人运动部分的旋转分量估计的里程计旋转的期望噪声，默认0.2（旋转存在旋转噪声） -->
        <param name="odom_alpha1" value="0.1"/>
        <!-- 指定由机器人运动部分的平移分量估计的里程计旋转的期望噪声，默认0.2（旋转中可能出现平移噪声） -->
        <param name="odom_alpha2" value="0.1"/>
        <!-- translation std dev, m -->
        <!-- 指定由机器人运动部分的平移分量估计的里程计平移的期望噪声，默认0.2（类似上） -->
        <param name="odom_alpha3" value="0.1"/>
        <!-- 指定由机器人运动部分的旋转分量估计的里程计平移的期望噪声，默认0.2（类似上） -->
        <param name="odom_alpha4" value="0.1"/>
        <!-- 平移相关的噪声参数（仅用于模型是“omni”的情况wiki官网的注释） -->
        <param name="odom_alpha5" value="0.1"/>
        <!-- 里程计默认使用的坐标系 -->
        <param name="odom_frame_id" value="odom"/>
        <!-- 用作机器人的基坐标系 -->
        <param name="base_frame_id" value="base_footprint"/>



        <!-- ********************激光模型参数******************** -->
        <!-- 更新滤波器时，每次扫描中多少个等间距的光束被使用（减小计算量，
        测距扫描中相邻波束往往不是独立的可以减小噪声影响，太小也会造成信息量少定位不准） -->
        <param name="laser_max_beams" value="180"/>
        <!-- 被考虑的最大扫描范围；参数设置为-1.0时，将会使用激光上报的最大扫描范围 -->
        <param name="laser_max_range" value="3.5"/>
        <!-- //被考虑的最小扫描范围；参数设置为-1.0时，将会使用激光上报的最小扫描范围 -->
        <param name="laser_min_range" value="0.1"/>


        <!-- ********************laser_z参数******************** -->
        <!-- 模型的z_hit部分的混合权值，默认0.95(混合权重1.具有局部测量噪声的正确范围以测量距离近似真实距离为均值，其后laser_sigma_hit为标准偏差的高斯分布的权重) -->
        <param name="laser_z_hit" value="0.5"/>
        <!-- 模型的z_short部分的混合权值，默认0.1（混合权重2.意外对象权重（类似于一元指数关于y轴对称0～测量距离（非最大距离）的部分：ηλe^(-λz)，其余部分为0，其中η为归一化参数，λ为laser_lambda_short,z为t时刻的一个独立测量值（一个测距值，测距传感器一次测量通常产生一系列的测量值）），动态的环境，如人或移动物体） -->
        <param name="laser_z_short" value="0.05"/>
        <!-- 模型的z_max部分的混合权值，默认0.05（混合权重3.测量失败权重（最大距离时为1，其余为0），如声呐镜面反射，激光黑色吸光对象或强光下的测量，最典型的是超出最大距离） -->
        <param name="laser_z_max" value="0.05"/>
        <!-- 模型的z_rand部分的混合权值，默认0.05（混合权重4.随机测量权重均匀分布（1平均分布到0～最大测量范围），完全无法解释的测量，如声呐的多次反射，传感器串扰） -->
        <param name="laser_z_rand" value="0.5"/>
        <!-- 被用在模型的z_hit部分的高斯模型的标准差，默认0.2m -->
        <param name="laser_sigma_hit" value="0.2"/>
        <!-- 模型z_short部分的指数衰减参数，默认0.1（根据ηλe^(-λz)，λ越大随距离增大意外对象概率衰减越快） -->
        <param name="laser_lambda_short" value="0.1"/>
        <!-- 模型使用，可以是beam, likehood_field, likehood_field_prob（和likehood_field一样但是融合了beamskip特征官网的注释），默认是“likehood_field”  -->
        <param name="laser_model_type" value="likelihood_field"/>
        <!-- <param name="laser_model_type" value="beam"/> -->
        <!-- 地图上做障碍物膨胀的最大距离，用作likelihood_field模型（likelihood_field_range_finder_model只描述了最近障碍物的距离，（目前理解应该是在这个距离内的障碍物膨胀处理,但是算法里又没有提到膨胀，不明确是什么意思）.这里算法用到上面的laser_sigma_hit。似然域计算测量概率的算法是将t时刻的各个测量（舍去达到最大测量范围的测量值）的概率相乘，单个测量概率：Zh * prob(dist,σ) +avg，Zh为laser_z_hit,avg为均匀分布概率，dist最近障碍物的距离，prob为0为中心标准方差为σ（laser_sigma_hit）的高斯分布的距离概率） -->
        <param name="laser_likelihood_max_dist" value="2.0"/>


        <!-- ********************全部滤波器参数******************** -->
        <!-- min_particles和max_particles：设定算法运行所允许的粒子的最小和最大数量，
             如果粒子数多，就算会更加精确，当然也更加消耗cpu资源。 -->
        <!-- 允许的粒子数量的最小值，默认100 -->
        <param name="min_particles" value="500"/>
        <!-- 允许的例子数量的最大值，默认5000 -->
        <param name="max_particles" value="3000"/>
        <!-- 真实分布和估计分布之间的最大误差，默认0.01 -->
        <param name="kld_err" value="0.02"/>
        <!-- 上标准分位数（1-p），其中p是估计分布上误差小于kld_err的概率，默认0.99 -->
        <param name="kld_z" value="0.99"/>
        <!-- 在执行滤波更新前平移运动的距离，默认0.2m(对于里程计模型有影响，
         模型中根据运动和地图求最终位姿的释然时丢弃了路径中的相关所有信息，
         已知的只有最终位姿，为了规避不合理的穿过障碍物后的非零似然，这个值建议不大于机器人半径。
         否则因更新频率的不同可能产生完全不同的结果) -->
        <param name="update_min_d" value="0.20"/>
        <!-- 执行滤波更新前旋转的角度，默认pi/6 rad -->
        <param name="update_min_a" value="0.20"/>
        <!-- 在重采样前需要的滤波更新的次数,默认2 -->
        <param name="resample_interval" value="1"/>
        <!-- Increase tolerance because the computer can get quite busy -->
        <!-- tf变换发布推迟的时间，为了说明tf变换在未来时间内是可用的 -->
        <param name="transform_tolerance" value="0.5"/>
        <!-- 慢速的平均权重滤波的指数衰减频率，用作决定什么时候通过增加随机位姿来recover，
             默认0（disable），可能0.001是一个不错的值 -->
        <param name="recovery_alpha_slow" value="0.0"/>
        <!-- 快速的平均权重滤波的指数衰减频率，用作决定什么时候通过增加随机位姿来recover，
            默认0（disable），可能0.1是个不错的值 -->
        <param name="recovery_alpha_fast" value="0.0"/>
        <!-- 扫描和路径发布到可视化软件的最大频率，设置参数为-1.0意为失能此功能，默认-1.0 -->
        <param name="gui_publish_rate" value="50.0"/>
        <param name="initial_pose_x" value="$(arg initial_pose_x)"/>
        <param name="initial_pose_y" value="$(arg initial_pose_y)"/>
        <param name="initial_pose_a" value="$(arg initial_pose_a)"/>
        <!-- 当设置为true时，AMCL将会订阅map话题，而不是调用服务返回地图。也就是说，当设置为true时，
        有另外一个节点实时的发布map话题，也就是机器人在实时的进行地图构建，并供给amcl话题使用；
        当设置为false时，通过map server，也就是调用已经构建完成的地图。在navigation 1.4.2中新加入的参数。 -->
        <param name="use_map_topic" value="$(arg use_map_topic)"/>

        <remap from="scan" to="$(arg scan_topic)"/>
    </node>
</launch>
