
# 这些参数设置了代价地图中的障碍物信息的阈值。
# "obstacle_range" 参数确定最大范围传感器读数，这将导致障碍物被放入代价地图中。
# 在这里，我们把它设置在2.5米，这意味着机器人只会更新其地图包含距离移动基座2.5米以内的障碍物的信息。
# “raytrace_range”参数确定了用于清除指定范围外的空间。
# 将其设置为3.0米，这意味着机器人将尝试清除3米外的空间，在代价地图中清除3米外的障碍物。
obstacle_range: 3.0
raytrace_range: 3.5


# 在这里，我们设置机器人的占用面积或机器人的半径是圆形。
# 在指定占地面积的情况下，假设机器人的中心处于（0.0,0.0），并且支持顺时针和逆时针规格。
# 我们还将设定代价地图的膨胀半径。膨胀半径应设定为在代价地图的与障碍物保持安全的最大距离。
# 例如，将膨胀半径设定为0.55米，意味着机器人针对相同的障碍物获取的所有路径都保持距离障碍物0.55米或更远。
# 如果你的机器人不能很好地通过窄门或其它狭窄的地方，则稍微减小这个值，相反地，如果机器人不断地撞到东西，则尝试增大这个值。
footprint: [[-0.04, -0.064], [-0.04, 0.064], [0.11, 0.064], [0.11, -0.064]]
# robot_radius: 0.12 #0.165
inflation_radius: 1.0 #0.1
cost_scaling_factor: 3.0

# “observe_sources”传感器源参数定义把信息传递给代价地图的传感器列表，以空格分隔每个传感器，每个传感器分别定义。
observation_sources: scan
# max_obstacle_height: 0.6
# min_obstacle_height: 0.0

map_type: costmap
# 设置上述传感器源observation_sources的传感器信息。
# 以laser_scan_sensor作为例子，应将“frame_name”参数设置为传感器坐标系的名称，
# “data_type”参数应根据话题使用的消息设置为LaserScan或PointCloud，并将“topic_name”设置为传感器发布数据的话题。
# “marking”和“clearing”参数确定传感器是否向代价地图添加障碍物信息或从代价地图中清除障碍物信息，或者同时都做。
scan:
  {
    sensor_frame: base_scan,
    data_type: LaserScan,
    topic: /scan,
    marking: true,
    clearing: true,
    # expected_update_rate: 0,
  }
